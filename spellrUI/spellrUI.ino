// simple project using Arduino UNO and 128x64 OLED Display to display a menu

#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <U8g2lib.h>
#include <SoftwareSerial.h>

#include <Adafruit_MSA301.h>
#include <Adafruit_Sensor.h>
#include <float.h> 

Adafruit_MSA311 msa;

const int numReadings = 10;
double rawAXs[numReadings]; // the readings from the analog input
double rawAYs[numReadings];
double rawAZs[numReadings];

const double magnitude_thres = 10;
const double spike_thres = 20;
bool isSwiping = false;

long startSwipeTime = 0;
long millis_thres = 100;

long potentialStopTime = 0;
long potentialStopThres = 70;
long totalSwipeThres = 100;

double swipeDataPY[20];
double swipeDataMA[20];
int swipeIndex = 0;

const int swipeHistory = 200;

double AYs[swipeHistory];
double VYs[swipeHistory-1];
double PYs[2];

bool swipeUp = false;


void pushReading(double arr[], double val) {
  // Shift all the readings one position down
  for (int i = sizeof(arr) - 1; i > 0; i--) {
    arr[i] = arr[i - 1];
  }
  arr[0] = val;
}

double average(double arr[]) {
  double total = 0; // Initialize total sum of the array elements
  for(int i = 0; i < sizeof(arr); i++) {
    total += arr[i]; // Sum up all the elements
  }
  double avg = total / sizeof(arr); // Calculate the average
  return avg; // Return the average value
}

double sum(double arr[]) {
  double total = 0; // Initialize total sum of the array elements
  for(int i = 0; i < sizeof(arr); i++) {
    total += arr[i]; // Sum up all the elements
  }
  return total;
}

double magnitude(double x, double y, double z){
  return sqrt(x*x + y*y + z*z);
}

int maxIndex(double arr[]) {
  double max = DBL_MIN;
  double index = -1;
  for(int i = 0; i < sizeof(arr); i++) {
    if (arr[i] > max) {
      index = i;
      max = arr[i];
    }
  }
  return index;
}

int maxValue(double arr[]) {
  double max = DBL_MIN;
  double index = -1;
  for(int i = 0; i < sizeof(arr); i++) {
    if (arr[i] > max) {
      index = i;
      max = arr[i];
    }
  }
  return max;
}

void clear(double arr[]) {
  for (int i = 0; i < sizeof(arr); i++) {
    arr[i] = 0;
  }
}


// U8GLIB_SSD1306_128X64 u8g(U8G_I2C_OPT_DEV_0 | U8G_I2C_OPT_NO_ACK | U8G_I2C_OPT_FAST); // Fast I2C / TWI
U8G2_SSD1306_128X64_NONAME_1_HW_I2C u8g2(U8G2_R0);
// U8GLIB_SSD1306_128X64 u8g(13, 11, 8, 9, 10); // SPI connection
// for SPI connection, use this wiring:
// GND > GND
// VCC > 5V
// SCL > 13
// SDA > 11
// RES > 10
// DC > 9
// CS > 8

SoftwareSerial BTSerial(7, 8);


// all the arrays below are generated from images using image2cpp website
// scroll down to see the actual code
// bluetooth logo
const unsigned char bluetooth_logo [] PROGMEM = {  // this is another way how to define images, using binary notation
  0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x02, 0x40, 0x22, 0x20, 0x12, 0x10, 0x0a, 0x20, 0x06, 0x40, 
	0x03, 0x80, 0x06, 0x40, 0x0a, 0x20, 0x12, 0x10, 0x22, 0x20, 0x02, 0x40, 0x03, 0x80, 0x00, 0x00
};

// 'icon_3dcube', 16x16px
const unsigned char bitmap_icon_3dcube [] PROGMEM = {
  0x00, 0x00, 0x01, 0x80, 0x07, 0x60, 0x19, 0x18, 0x61, 0x06, 0x51, 0x0a, 0x45, 0xa2, 0x41, 0x02, 
  0x45, 0x22, 0x41, 0x02, 0x45, 0xa2, 0x51, 0x0a, 0x61, 0x06, 0x19, 0x18, 0x07, 0x60, 0x01, 0x80
};
// 'icon_battery', 16x16px
const unsigned char bitmap_icon_battery [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xf8, 0x40, 0x04, 0x5b, 0x66, 0x5b, 0x66, 
  0x5b, 0x66, 0x40, 0x04, 0x3f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'icon_dashboard', 16x16px
const unsigned char bitmap_icon_dashboard [] PROGMEM = {
  0x07, 0xe0, 0x18, 0x18, 0x21, 0x24, 0x50, 0x02, 0x48, 0x0a, 0x84, 0x01, 0x83, 0x81, 0xa2, 0x45, 
  0x82, 0x41, 0x81, 0x81, 0xa0, 0x05, 0x40, 0x02, 0x4b, 0xd2, 0x23, 0xc4, 0x18, 0x18, 0x07, 0xe0
};
// 'icon_fireworks', 16x16px
const unsigned char bitmap_icon_fireworks [] PROGMEM = {
  0x00, 0x00, 0x00, 0x08, 0x00, 0x94, 0x10, 0x08, 0x10, 0x00, 0x6c, 0x00, 0x10, 0x10, 0x10, 0x10, 
  0x00, 0x00, 0x00, 0xc6, 0x00, 0x00, 0x00, 0x10, 0x04, 0x10, 0x0a, 0x00, 0x04, 0x00, 0x00, 0x00
};
// 'icon_gps_speed', 16x16px
const unsigned char bitmap_icon_gps_speed [] PROGMEM = {
  0x00, 0x00, 0x03, 0xf0, 0x00, 0x08, 0x01, 0xe4, 0x00, 0x12, 0x00, 0xca, 0x06, 0x2a, 0x07, 0x2a, 
  0x07, 0x8a, 0x07, 0xc2, 0x07, 0xc0, 0x0a, 0x00, 0x1f, 0x00, 0x20, 0x80, 0x7f, 0xc0, 0x00, 0x00
};
// 'icon_knob_over_oled', 16x16px
const unsigned char bitmap_icon_knob_over_oled [] PROGMEM = {
  0x00, 0x00, 0x1f, 0xf0, 0x13, 0x50, 0x1b, 0xb0, 0x11, 0x50, 0x1f, 0xf0, 0x03, 0x80, 0x01, 0x00, 
  0x00, 0x00, 0x09, 0x20, 0x49, 0x24, 0x20, 0x08, 0x00, 0x01, 0x80, 0x02, 0x00, 0x00, 0x00, 0x00
};
// 'icon_parksensor', 16x16px
const unsigned char bitmap_icon_parksensor [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x22, 0x00, 0x25, 0x00, 0xf9, 0x00, 0x00, 0x81, 
  0x0c, 0x85, 0x12, 0x95, 0xd2, 0x95, 0x0c, 0x05, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'icon_turbo', 16x16px
const unsigned char bitmap_icon_turbo [] PROGMEM = {
  0x00, 0x0e, 0x07, 0xf1, 0x18, 0x01, 0x20, 0x01, 0x40, 0x01, 0x43, 0xf1, 0x84, 0x4e, 0x8a, 0xa0, 
  0x89, 0x22, 0x8a, 0xa2, 0x84, 0x42, 0x43, 0x84, 0x40, 0x04, 0x20, 0x08, 0x18, 0x30, 0x07, 0xc0
};

// Array of all bitmaps for convenience. (Total bytes used to store images in PROGMEM = 384)
const unsigned char* bitmap_icons[8] = {
  bitmap_icon_3dcube,
  bitmap_icon_battery,
  bitmap_icon_dashboard,
  bitmap_icon_fireworks,
  bluetooth_logo,
  bitmap_icon_knob_over_oled,
  bitmap_icon_parksensor,
  bitmap_icon_turbo
};


// 'screenshot_3dcube', 128x64px
const unsigned char bitmap_screenshot_3dcube [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0xd7, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x45, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x96, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x15, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x80, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf8, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0xf0, 0x00, 0x00, 0x20, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0e, 0x00, 0x00, 0x2f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x01, 0xc0, 0x7f, 0xf0, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x3f, 0x80, 0x20, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0x20, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0x20, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0x20, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0x20, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0x20, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0x20, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0x20, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0x20, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0x20, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0x20, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0x20, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0x20, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0x20, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0x20, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0x20, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0x20, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0x20, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0x20, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0x20, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0x20, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0x20, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x3f, 0x80, 0x20, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x01, 0xc0, 0x7f, 0xf0, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0e, 0x00, 0x00, 0x2f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0xf0, 0x00, 0x00, 0x20, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf8, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x80, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'screenshot_battery', 128x64px
const unsigned char bitmap_screenshot_battery [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x0f, 0xf8, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x00, 0xff, 0xff, 0x80, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x03, 0xff, 0xff, 0xe0, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x07, 0xf0, 0x3e, 0x0f, 0xff, 0xff, 0xf8, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x03, 0xe0, 0x7f, 0x1f, 0xff, 0xff, 0xfc, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x01, 0xc0, 0xff, 0xbf, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x10, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x39, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x13, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x01, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x02, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xcf, 0xf0, 0x3c, 0x7c, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x02, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xcf, 0xe0, 0x18, 0x38, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x0f, 0xc7, 0x89, 0x39, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x0f, 0xcf, 0xc9, 0x31, 0xff, 0x00, 0x1c, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xcf, 0xcf, 0xf8, 0x23, 0xff, 0x00, 0x3e, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xcf, 0xcf, 0xfc, 0x67, 0xff, 0x00, 0x3e, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xcf, 0xc0, 0x3f, 0xc7, 0xff, 0x00, 0x3e, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xcf, 0xc0, 0x1f, 0x8f, 0xff, 0x00, 0x1c, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xcf, 0xcf, 0x8f, 0x98, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xcf, 0xcf, 0xcf, 0x10, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xcf, 0xcf, 0xce, 0x32, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xcf, 0xc7, 0x8e, 0x72, 0x7e, 0x70, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x03, 0xe0, 0x1c, 0x70, 0x7e, 0xf8, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x03, 0xf0, 0x3c, 0xf8, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xfc, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xf8, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x70, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0xe0, 0x00, 0x00, 0x08, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x80, 0x01, 0xf0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xfe, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xfc, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 
  0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0xd7, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x45, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x96, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x15
};
// 'screenshot_gauges', 128x64px
const unsigned char bitmap_screenshot_gauges [] PROGMEM = {
  0x10, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x08, 
  0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
  0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 
  0xfe, 0x00, 0x00, 0xe8, 0x00, 0x00, 0x07, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x17, 0x00, 0x00, 0x7f, 
  0x7e, 0x00, 0x0f, 0xe8, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x17, 0xf0, 0x00, 0x7e, 
  0x30, 0x00, 0x7f, 0xe8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x17, 0xfe, 0x00, 0x0c, 
  0x10, 0x01, 0xff, 0xe8, 0x00, 0x00, 0x00, 0x01, 0x70, 0x00, 0x00, 0x00, 0x17, 0xff, 0x80, 0x08, 
  0x00, 0x03, 0xff, 0xe8, 0x00, 0x20, 0x00, 0x01, 0x00, 0x00, 0x04, 0x00, 0x17, 0xff, 0xc0, 0x00, 
  0x00, 0x0f, 0xff, 0xe8, 0x00, 0x00, 0x00, 0x01, 0x70, 0x00, 0x00, 0x00, 0x17, 0xff, 0xf0, 0x00, 
  0x00, 0x1f, 0xff, 0xe8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x17, 0xff, 0xf8, 0x00, 
  0x00, 0x7f, 0xfe, 0x08, 0x00, 0x00, 0x00, 0x1b, 0xb0, 0x00, 0x00, 0x00, 0x10, 0x7f, 0xfe, 0x00, 
  0x00, 0xff, 0xf0, 0x08, 0x00, 0x00, 0x80, 0x21, 0x08, 0x01, 0x00, 0x00, 0x10, 0x0f, 0xff, 0x00, 
  0x01, 0xff, 0xc0, 0x08, 0x00, 0x00, 0x00, 0x1c, 0x70, 0x00, 0x00, 0x00, 0x10, 0x03, 0xff, 0x80, 
  0x01, 0xff, 0x80, 0x08, 0x00, 0x00, 0x00, 0x23, 0x88, 0x00, 0x00, 0x00, 0x10, 0x01, 0xff, 0x80, 
  0x03, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xc0, 
  0x07, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xe0, 
  0x07, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xe0, 
  0x0f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 
  0x1f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf8, 
  0x1f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf8, 
  0x3f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xfc, 
  0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfc, 
  0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfc, 
  0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 
  0x7f, 0x00, 0xfc, 0x1c, 0x0e, 0x00, 0x01, 0x00, 0x00, 0x80, 0x01, 0xc3, 0x81, 0xc0, 0xe0, 0xfe, 
  0x7f, 0x00, 0x80, 0x22, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x20, 0x82, 0x21, 0x10, 0xfe, 
  0x7e, 0x00, 0x80, 0x41, 0x20, 0x80, 0x00, 0x00, 0x00, 0x00, 0x04, 0x10, 0x84, 0x12, 0x08, 0x7e, 
  0xfe, 0x00, 0x80, 0x41, 0x20, 0x80, 0x00, 0x00, 0x00, 0x00, 0x04, 0x10, 0x84, 0x12, 0x08, 0x7f, 
  0xfe, 0x00, 0x80, 0x41, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x04, 0x10, 0x84, 0x12, 0x08, 0x7f, 
  0xfe, 0x00, 0xf8, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x84, 0x12, 0x08, 0x7f, 
  0xfc, 0x00, 0x04, 0x02, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x84, 0x12, 0x08, 0x3f, 
  0xfc, 0x00, 0x02, 0x04, 0x01, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x40, 0x84, 0x12, 0x08, 0x3f, 
  0xfc, 0x00, 0x82, 0x08, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x84, 0x12, 0x08, 0x3f, 
  0xfe, 0x00, 0x82, 0x30, 0x20, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x84, 0x12, 0x08, 0x7f, 
  0xfe, 0x00, 0x82, 0x20, 0x20, 0x80, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x84, 0x12, 0x08, 0x7f, 
  0xfe, 0x00, 0x44, 0x40, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x82, 0x21, 0x10, 0x7f, 
  0x7e, 0x00, 0x38, 0x7f, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf3, 0xe1, 0xc0, 0xe0, 0x7e, 
  0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 
  0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 
  0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 
  0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfc, 
  0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfc, 
  0x3f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x03, 0xfc, 
  0x1f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xc0, 0x00, 0x00, 0x00, 0x07, 0xf8, 
  0x1f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf8, 
  0x0f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x11, 0xc0, 0x00, 0x00, 0x00, 0x0f, 0xf0, 
  0x07, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x30, 0x00, 0x00, 0x00, 0x1f, 0xe0, 
  0x07, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x1f, 0xe0, 
  0x03, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x0f, 0xc0, 
  0x01, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x07, 0x80, 
  0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x03, 0x80, 
  0x00, 0x80, 0x04, 0x5c, 0x90, 0x00, 0x80, 0x00, 0x00, 0x01, 0x00, 0x0e, 0x72, 0x20, 0x01, 0x00, 
  0x00, 0x00, 0x06, 0xd2, 0x90, 0x00, 0x00, 0x07, 0x80, 0x00, 0x00, 0x09, 0x4b, 0x60, 0x00, 0x00, 
  0x00, 0x00, 0x05, 0x52, 0x90, 0x00, 0x00, 0x04, 0xc0, 0x00, 0x00, 0x09, 0x4a, 0xa0, 0x00, 0x00, 
  0x00, 0x00, 0x04, 0x5c, 0xf0, 0x00, 0x00, 0x04, 0xa0, 0x00, 0x00, 0x0e, 0x72, 0x20, 0x00, 0x00, 
  0x00, 0x02, 0x04, 0x50, 0x90, 0x20, 0x00, 0x07, 0xa0, 0x00, 0x04, 0x0a, 0x42, 0x20, 0x40, 0x00, 
  0x00, 0x01, 0x84, 0x50, 0x90, 0xc0, 0x00, 0x07, 0xa0, 0x00, 0x03, 0x09, 0x42, 0x21, 0x80, 0x00, 
  0x00, 0x00, 0x70, 0x00, 0x07, 0x00, 0x00, 0x07, 0xa0, 0x00, 0x00, 0xe0, 0x00, 0x0e, 0x00, 0x00, 
  0x00, 0x00, 0x0f, 0x00, 0x78, 0x00, 0x00, 0x0f, 0xc0, 0x00, 0x00, 0x1e, 0x00, 0xf0, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x15, 0xd7, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x15, 0x45, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x15, 0x96, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x19, 0x15
};

// Array of all bitmaps for convenience. (Total bytes used to store images in PROGMEM = 8320)
const unsigned char* bitmap_screenshots[3] = {
  bitmap_screenshot_3dcube,
  bitmap_screenshot_battery,
  bitmap_screenshot_gauges
};


// 'scrollbar_background', 8x64px
const unsigned char bitmap_scrollbar_background [] PROGMEM = {
  0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 
  0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 
  0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 
  0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00
};

// 'item_sel_outline', 128x21px
const unsigned char bitmap_item_sel_outline [] PROGMEM = {
  0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
  0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 
  0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 
  0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 
  0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 
  0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 
  0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 
  0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 
  0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 
  0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 
  0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 
  0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 
  0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 
  0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 
  0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 
  0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 
  0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 
  0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 
  0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 
  0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
  0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0
};




// ------------------ end generated bitmaps from image2cpp ---------------------------------



const int NUM_ITEMS = 8; // number of items in the list and also the number of screenshots and screenshots with QR codes (other screens)
const int MAX_ITEM_LENGTH = 20; // maximum characters for the item name

char menu_items [NUM_ITEMS] [MAX_ITEM_LENGTH] = {  // array with item names
  { "TRANSCRIBE" }, 
  { "Battery" }, 
  { "Dashboard" },
  { "WordQuest" },
  { "Bluetooth" }, 
  { "Calibrate" }
 };
// note - when changing the order of items above, make sure the other arrays referencing bitmaps
// also have the same order, for example array "bitmap_icons" for icons, and other arrays for screenshots and QR codes

#define BUTTON_UP_PIN 12 // pin for UP button 
#define BUTTON_SELECT_PIN 5 // pin for SELECT button
#define BUTTON_DOWN_PIN 4 // pin for DOWN button

// Display configuration
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

int button_up_clicked = 0; // only perform action when button is clicked, and wait until another press
int button_select_clicked = 0; // same as above
int button_down_clicked = 0; // same as above

int item_selected = 0; // which item in the menu is selected

int item_sel_previous; // previous item - used in the menu screen to draw the item before the selected one
int item_sel_next; // next item - used in the menu screen to draw next item after the selected one

int current_screen = 0;   // 0 = menu, 1 = screenshot, 2 = qr

// SPELLING: 0 just shows the word, 1 shows the letters one by one, 2 shows each individual letter being written out
int spelling_mode = 0;



/***************

STATE TRANSCRIBE - variables needed for transcription functionality

***************/
const int micPin = A0;
bool inTranscribeMode = false;

String inputString = "";      // a String to hold incoming data
bool stringComplete = false;  // whether the string is complete

String translated_word = "Try Again!";






/***************

STATE SWR - Variables needed for SWR game (wordquest)

***************/
char* words[] = {"apple", "banana", "orange", "qwerty", "zxcvbn"};
bool wordIsReal[] = {true, true, true, false, false};
int numWords = sizeof(words) / sizeof(words[0]);

int wordIndex = 0;
bool swr_waiting = true;
int correct = 0, incorrect = 0;

float baselinePitch = -30.0;

/********************

HELPER FN FOR FUNDING TILT DIRECTION (pitch and roll based on accelerometer)

********************/

String getTiltDirection(float pitch, float roll, float baselinePitch) {
  String direction = "";
  
  // Define the baseline as 30 degrees tilted up
  // float baselinePitch = -30.0; // Adjusting for 30 degrees up as the new baseline
  
  // Define the buffer region (deadzone) to avoid sensitivity to minor tilts
  float bufferRegion = 30.0; // Degrees
  
  // Adjust pitch relative to the new baseline
  pitch -= baselinePitch;
  
  if (pitch > bufferRegion) {
    direction += "Down ";
  } else if (pitch < -bufferRegion) {
    direction += "Up ";
  }
  
  if (roll > bufferRegion) {
    direction += "Right";
  } else if (roll < -bufferRegion) {
    direction += "Left";
  }
  
  if (direction == "") {
    direction = "Stable";
  }
  
  return direction;
}


float calibratePitch () {
  // Calibration logic to establish baseline pitch

  // Variables to store the sum of pitch readings and the final baseline pitch
  float pitchSum = 0.0;
  const int readings = 30; // Number of readings to take for averaging
  
  // Take multiple readings of the pitch over a short period
  for (int i = 0; i < readings; i++) {
      sensors_event_t event; 
      msa.getEvent(&event);
      

      double rawAX = event.acceleration.x;
      double rawAY = event.acceleration.y;
      double rawAZ = event.acceleration.z;

      float pitch = atan(event.acceleration.x / sqrt(event.acceleration.y * event.acceleration.y + event.acceleration.z * event.acceleration.z)) * (180.0 / M_PI);
      pitchSum += pitch; // Assuming readPitch() is your function to read the current pitch
      delay(100); // Short delay between readings to spread them out over time
}

  float new_pitch_base = pitchSum / readings;
  return new_pitch_base;
}

/***************

STATE BLUETOOTH - Variables needed for bluetooth connection and maintenance

***************/
bool is_bluetooth_connected = false;


void setup() {
  u8g2.begin();
  u8g2.setColorIndex(1);  // set the color to white

  // define pins for buttons
  // INPUT_PULLUP means the button is HIGH when not pressed, and LOW when pressed
  // since it´s connected between some pin and GND
  pinMode(BUTTON_UP_PIN, INPUT_PULLUP); // up button
  pinMode(BUTTON_SELECT_PIN, INPUT_PULLUP); // select button
  pinMode(BUTTON_DOWN_PIN, INPUT_PULLUP); // down button

  BTSerial.begin(9600);
  Serial.begin(9600);
  pinMode(micPin, INPUT);


  if (!msa.begin(MSA311_I2CADDR_DEFAULT, &Wire1)) {
      Serial.println("Failed to find MSA301 chip");
      while (1) { delay(10); }
    }
    Serial.println("MSA301 Found!");

  clear(rawAXs); clear(rawAYs); clear(rawAZs);
  clear(AYs); clear(VYs); clear(PYs);

}


void loop() {

  u8g2.firstPage(); // required for page drawing mode for u8g library

  if (current_screen == 0) { // MENU SCREEN


        sensors_event_t event; 
        msa.getEvent(&event);
        

        double rawAX = event.acceleration.x;
        double rawAY = event.acceleration.y;
        double rawAZ = event.acceleration.z;

        float pitch = atan(event.acceleration.x / sqrt(event.acceleration.y * event.acceleration.y + event.acceleration.z * event.acceleration.z)) * (180.0 / M_PI);
        float roll = atan(event.acceleration.y / sqrt(event.acceleration.x * event.acceleration.x + event.acceleration.z * event.acceleration.z)) * (180.0 / M_PI);

        String tiltDirection = getTiltDirection(pitch, roll, baselinePitch);



      // up and down buttons only work for the menu screen
      if (tiltDirection.startsWith("Down")) { // up button clicked - jump to previous menu item
        item_selected = item_selected - 1; // select previous item
        button_up_clicked = 1; // set button to clicked to only perform the action once
        if (item_selected < 0) { // if first item was selected, jump to last item
          item_selected = NUM_ITEMS-1;
        }
        delay(500);
      }
      else if (tiltDirection.startsWith("Up")) { // down button clicked - jump to next menu item
        item_selected = item_selected + 1; // select next item
        button_down_clicked = 1; // set button to clicked to only perform the action once
        if (item_selected >= NUM_ITEMS) { // last item was selected, jump to first menu item
          item_selected = 0;
        }
        delay(500);
      }

      if ((digitalRead(BUTTON_UP_PIN) == HIGH) && (button_up_clicked == 1)) { // unclick 
        button_up_clicked = 0;
      }
      if ((digitalRead(BUTTON_DOWN_PIN) == HIGH) && (button_down_clicked == 1)) { // unclick
        button_down_clicked = 0;
      }

  }

  if ((digitalRead(BUTTON_SELECT_PIN) == LOW) && (button_select_clicked == 0)) { // select button clicked, jump between screens
     button_select_clicked = 1; // set button to clicked to only perform the action once
     if (current_screen == 0) {current_screen = 1;} // menu items screen --> screenshots screen
     else {current_screen = 0;} // back to screen --> menu items screen
  }
  if ((digitalRead(BUTTON_SELECT_PIN) == HIGH) && (button_select_clicked == 1)) { // unclick 
    button_select_clicked = 0;
  }

  // set correct values for the previous and next items
  item_sel_previous = item_selected - 1;
  if (item_sel_previous < 0) {item_sel_previous = NUM_ITEMS - 1;} // previous item would be below first = make it the last
  item_sel_next = item_selected + 1;  
  if (item_sel_next >= NUM_ITEMS) {item_sel_next = 0;} // next item would be after last = make it the first


  do {
    ///////////////////RENDER/////////////////////////// RENDERING SCREEN STUFF BELOW HERE


    /********************
    current_screen 0
    RENDER MENU stuff here

    ********************/
    if (current_screen == 0) { // MENU SCREEN

      // selected item background
      u8g2.drawBitmap(0, 22, 128/8, 21, bitmap_item_sel_outline);

      // draw previous item as icon + label
      u8g2.setFont(u8g_font_7x14);
      u8g2.drawStr(25, 15, menu_items[item_sel_previous]); 
      u8g2.drawBitmap( 4, 2, 16/8, 16, bitmap_icons[item_sel_previous]);          

      // draw selected item as icon + label in bold font
      u8g2.setFont(u8g_font_7x14B);    
      u8g2.drawStr(25, 15+20+2, menu_items[item_selected]);   
      u8g2.drawBitmap( 4, 24, 16/8, 16, bitmap_icons[item_selected]);     

      // draw next item as icon + label
      u8g2.setFont(u8g_font_7x14);     
      u8g2.drawStr(25, 15+20+20+2+2, menu_items[item_sel_next]);   
      u8g2.drawBitmap( 4, 46, 16/8, 16, bitmap_icons[item_sel_next]);  

      // draw scrollbar background
      u8g2.drawBitmap(128-8, 0, 8/8, 64, bitmap_scrollbar_background);

      // draw scrollbar handle
      u8g2.drawBox(125, 64/NUM_ITEMS * item_selected, 3, 64/NUM_ITEMS); 


      if (is_bluetooth_connected) {
        // draw bluetooth connected
        u8g2.drawBitmap(128-16-4, 1, 16/8, 16, bluetooth_logo);    
      }
    }

    /********************
    current_screen 1, item_selected 3
    RENDER SWR in-game graphics, the plus sign + thing and the 

    ********************/
    else if (current_screen == 1 && item_selected == 3) {
      // SWR GAME GRAPHICS HERE
      if (swr_waiting) {
          u8g2.setFont(u8g_font_7x14B);
          u8g2.setFontMode(1); // Enable transparent mode
          int textWidth = u8g2.getStrWidth("+");
          int x = (128 - textWidth) / 2; // Calculate x-coordinate to center the text
          int y = 20; // Adjust this value to vertically position the text
          u8g2.drawStr(x, y, "+");
      } else {
        u8g2.setFont(u8g_font_7x14B);
        u8g2.setFontMode(1); // Enable transparent mode
        int textWidth = u8g2.getStrWidth(words[wordIndex]);
        int x = (128 - textWidth) / 2; // Calculate x-coordinate to center the text
        int y = 35; // Adjust this value to vertically position the text
        u8g2.drawStr(x, y, words[wordIndex]);

        u8g2.setFont(u8g2_font_5x7_tr); // Set a smaller font
        u8g2.drawStr(x + 5, 10, "REAL"); // Draw "LEFT" in the lower-left corner
        u8g2.drawStr(x + 5, 62, "FAKE"); // Draw "RIGHT" in the lower-right corner
      }
    }

    /********************
    current_screen 1, item_selected 4
    RENDER BLUETOOTH thing

    ********************/
    else if (current_screen == 1 && item_selected == 4) {
      if (!is_bluetooth_connected) {
        u8g2.setFont(u8g_font_7x14B);
        u8g2.setFontMode(1); // Enable transparent mode
        int textWidth = u8g2.getStrWidth("Connecting...");
        int x = (128 - textWidth) / 2; // Calculate x-coordinate to center the text
        int y = 35; // Adjust this value to vertically position the text
        u8g2.drawStr(x, y, "Connecting...");
      } else {
        u8g2.setFont(u8g_font_7x14B);
        u8g2.setFontMode(1); // Enable transparent mode
        int textWidth = u8g2.getStrWidth("Connected!");
        int x = (128 - textWidth) / 2; // Calculate x-coordinate to center the text
        int y = 35; // Adjust this value to vertically position the text
        u8g2.drawStr(x, y, "Connected!");
      }
    }

    /********************
    current_screen 1 item_selected 0
    RENDER Listening..... graphic

    ********************/
    else if (current_screen == 1 && item_selected == 0) {
        u8g2.setFont(u8g_font_7x14B);
        u8g2.setFontMode(1); // Enable transparent mode
        int textWidth = u8g2.getStrWidth("Listening...");
        int x = (128 - textWidth) / 2; // Calculate x-coordinate to center the text
        int y = 35; // Adjust this value to vertically position the text
        u8g2.drawStr(25, 25, "Listening...");
    }

    /********************
    current_screen 1 item_selected 5
    RENDER Calibration

    ********************/
    else if (current_screen == 1 && item_selected == 5) {
        u8g2.setFont(u8g_font_7x14B);
        u8g2.setFontMode(1); // Enable transparent mode
        int textWidth = u8g2.getStrWidth("Hold Still...");
        int x = (128 - textWidth) / 2; // Calculate x-coordinate to center the text
        int y = 35; // Adjust this value to vertically position the text
        u8g2.drawStr(25, 25, "Hold Still...");
    }
    /********************
    current_screen 1    DEFAULT SCREEN
    RENDER whatever the bitmap is supposed to be

    ********************/
    else if (current_screen == 1) {
      u8g2.drawBitmap( 0, 0, 128/8, 64, bitmap_screenshots[item_selected]); // draw screenshot
    }

    /********************
    current_screen 3
    RENDER output of transcribe word, different spelling modes

    ********************/
    else if (current_screen == 3) {   // DISPLAY WORDS SCREEN
      if (spelling_mode == 0) {
        u8g2.setFont(u8g_font_7x14B);
        u8g2.setFontMode(1); // Enable transparent mode
        int textWidth = u8g2.getStrWidth(translated_word.c_str());
        int x = (128 - textWidth) / 2; // Calculate x-coordinate to center the text
        int y = 35; // Adjust this value to vertically position the text
        u8g2.drawStr(x, y, translated_word.c_str());
      }
    }
    
    /********************
    current_screen 4
    RENDER SWR GAME (wordquest)

    ********************/
    else if (current_screen == 4) {   
      u8g2.drawStr(25, 15+10+2, ("Correct: " + String(correct)).c_str());
      u8g2.drawStr(25, 15+30+2, ("Incorrect: " + String(incorrect)).c_str());
      // correct = 0, incorrect = 0;
      wordIndex = 0;
    }
  } while ( u8g2.nextPage() ); // required for page drawing mode with u8g library






    ///////////////////LOGIC/////////////////////////// Internal logic and state stuff for all screens here



/*********************************

Transcribe LOGIC: listening to the microphone and handling serial shit

********************************/
  if (current_screen == 1 && item_selected == 0) {
    Serial.println("GO");
    BTSerial.println("GO");

    inTranscribeMode = true;

    // two button presses:
    // while (inTranscribeMode) {
    //   int micValue = analogRead(micPin);  // Read the microphone level
    //   Serial.println(micValue);           // Print the microphone level to the Serial Monitor
    //   BTSerial.println(micValue);           // Print the microphone level to the Serial Monitor
    //   delay(10);                          // Adjust based on your desired sampling rate
    //   if ((digitalRead(BUTTON_SELECT_PIN) == LOW) && (button_select_clicked == 0)) { // select button clicked, jump between screens
    //     button_select_clicked = 1; // set button to clicked to only perform the action once
    //     inTranscribeMode = false;
    //   }
    //   if ((digitalRead(BUTTON_SELECT_PIN) == HIGH) && (button_select_clicked == 1)) { // unclick 
    //       button_select_clicked = 0;
    //   }
    // }

    // one holding press:
    // Check if the select button is pressed
    if (digitalRead(BUTTON_SELECT_PIN) == LOW) {
      inTranscribeMode = true; // Enter transcribe mode
    }

    while (inTranscribeMode) {
      int micValue = analogRead(micPin); // Read the microphone level

      Serial.println(micValue); // Print the microphone level to the Serial Monitor
      BTSerial.println(micValue); // Print the microphone level to the Serial Monitor

      // Check if the select button is released
      if (digitalRead(BUTTON_SELECT_PIN) == HIGH) {
        inTranscribeMode = false; // Exit transcribe mode
      }

      delay(10); // Adjust based on your desired sampling rate
    }

    

    Serial.println("STOP");
    BTSerial.println("STOP");
    // 2 SECOND DELAY BETWEEN
    delay(2000); 

    // Check if something is available in Serial
    while (BTSerial.available()) {
      char inChar = (char)BTSerial.read();
      inputString += inChar;
      if (inChar == '\n') {
        stringComplete = true;
      }
    }

    if (stringComplete) {
      // Check if the string starts with "RES: "
      if (inputString.startsWith("RES: ")) {
        // Extract the word after "RES: "
        String word = inputString.substring(5);  // Skip "RES: " (4 chars) and one space
        translated_word = word;
      }
      inputString = "";        // Clear the input string for the next read
      stringComplete = false;  // Reset the flag
    }
    
    current_screen = 3;
  }


/*********************************

SWR GAME WORD LOGIC (wordquest)

********************************/
  if (current_screen == 1 && item_selected == 3) {
    // ENDING THE GAME
    if (wordIndex == numWords - 1) {
        current_screen = 4;
    }

    else {
      // STARTING NEW GAME
      if (wordIndex == 0) {
          correct = 0, incorrect = 0;
      }

      if (swr_waiting) {
          // Calibration logic to establish baseline pitch

          // Calculate the average pitch to establish the baseline
          baselinePitch = calibratePitch();

          // Now baselinePitch holds the average pitch during calibration
          // You can use this as your reference pitch for future tilt detection

          swr_waiting = false; // Exit calibration mode

      } else {
        Serial.println(baselinePitch);
        String fake_or_real = "";

        // Wait for serial input
        while (fake_or_real.length() == 0) {

          /////////////// INSERT IMU LOGIC HERE
          // IMU: if it's left tilt, println "left\n", otherwise print "right\n"
          sensors_event_t event; 
          msa.getEvent(&event);
          

          double rawAX = event.acceleration.x;
          double rawAY = event.acceleration.y;
          double rawAZ = event.acceleration.z;

          float pitch = atan(event.acceleration.x / sqrt(event.acceleration.y * event.acceleration.y + event.acceleration.z * event.acceleration.z)) * (180.0 / M_PI);
          float roll = atan(event.acceleration.y / sqrt(event.acceleration.x * event.acceleration.x + event.acceleration.z * event.acceleration.z)) * (180.0 / M_PI);

          String tiltDirection = getTiltDirection(pitch, roll, baselinePitch);


          if (tiltDirection.startsWith("Up")) {
            fake_or_real = "fake"; // left = UP
          } else if (tiltDirection.startsWith("Down")) {
            fake_or_real = "real"; // right = DOWN
          }
        }

        // Check if the response is correct
        if (fake_or_real == "real") {
          if (wordIsReal[wordIndex]) {
            correct = correct + 1;
          } else {
            incorrect = incorrect + 1;
          }
        } else if (fake_or_real == "fake") {
          if (!wordIsReal[wordIndex]) {
            correct = correct + 1;
          } else {
            incorrect = incorrect + 1;
          }
        }
        // Serial.println(fake_or_real);
        // Serial.println(correct);
        // Serial.println(incorrect);

        fake_or_real = ""; // Reset the fake_or_real string
        wordIndex = (wordIndex + 1) % numWords;
        swr_waiting = true;
      }
    }
  }


  /*********************************

  BLUETOOTH LOGIC

  ********************************/
  if (current_screen == 1 && item_selected == 4) { // Bluetooth screen
    is_bluetooth_connected = BTSerial.available(); // Update connection status
  }

  /*********************************

  CALIBRATING LOGIC

  ********************************/
  else if (current_screen == 1 && item_selected == 5) { // Bluetooth screen
    baselinePitch = calibratePitch();
    current_screen = 0;
  }

}
